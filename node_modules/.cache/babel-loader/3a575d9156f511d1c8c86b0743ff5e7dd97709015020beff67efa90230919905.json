{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, signInWithEmailAndPassword, GoogleAuthProvider } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD4TkR1Mvt1J0GxTEBRFy3YYL2K_RPgeS8\",\n  authDomain: \"crwn-clothing-db-1481c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-1481c\",\n  storageBucket: \"crwn-clothing-db-1481c.firebasestorage.app\",\n  messagingSenderId: \"535960439826\",\n  appId: \"1:535960439826:web:6b4e0351808504a8fc1ccb\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n//google authrntication through firebase\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\n\n//craeting user in firesbase after google auth\nexport const createUserDocumentFromAuth = async userAuth => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot.exists());\n\n  //if user data does not exist\n  //create / set the document with data from userAuth in my collection\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createAt\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  //if user data exist\n  //return userDocRef\n  return userDocRef;\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","signInWithEmailAndPassword","GoogleAuthProvider","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createAt","Date","error","message"],"sources":["/Users/mbeng/crw-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { \n    getAuth, \n    signInWithRedirect, \n    signInWithPopup, \n    signInWithEmailAndPassword,\n    GoogleAuthProvider \n} from 'firebase/auth';\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc\n} from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD4TkR1Mvt1J0GxTEBRFy3YYL2K_RPgeS8\",\n  authDomain: \"crwn-clothing-db-1481c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-1481c\",\n  storageBucket: \"crwn-clothing-db-1481c.firebasestorage.app\",\n  messagingSenderId: \"535960439826\",\n  appId: \"1:535960439826:web:6b4e0351808504a8fc1ccb\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n//google authrntication through firebase\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n   prompt: \"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup (auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider)\n\nexport const db = getFirestore();\n\n//craeting user in firesbase after google auth\nexport const createUserDocumentFromAuth = async (userAuth) => {\n  const userDocRef = doc(db, 'users', userAuth.uid);\n\n  console.log(userDocRef);\n\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot.exists());\n\n  //if user data does not exist\n  //create / set the document with data from userAuth in my collection\n   if(!userSnapshot.exists()) {\n     const { displayName, email} = userAuth;\n     const createAt = new Date();\n\n     try {\n       await setDoc(userDocRef, {\n        displayName,\n        email,\n        createAt\n       })\n     } catch (error) {\n        console.log('error creating the user', error.message);\n     }\n   }\n\n  //if user data exist\n  //return userDocRef\n   return userDocRef;\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACIC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,0BAA0B,EAC1BC,kBAAkB,QACf,eAAe;AACtB,SACEC,YAAY,EACZC,GAAG,EACHC,MAAM,EACNC,MAAM,QACD,oBAAoB;;AAE3B;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,4CAA4C;EAC3DC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;;AAEjD;AACA,MAAMQ,cAAc,GAAG,IAAIb,kBAAkB,CAAC,CAAC;AAE/Ca,cAAc,CAACC,mBAAmB,CAAC;EAChCC,MAAM,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KAAMnB,eAAe,CAAEkB,IAAI,EAAEH,cAAc,CAAC;AACjF,OAAO,MAAMK,wBAAwB,GAAGA,CAAA,KAAMrB,kBAAkB,CAACmB,IAAI,EAAEH,cAAc,CAAC;AAEtF,OAAO,MAAMM,EAAE,GAAGlB,YAAY,CAAC,CAAC;;AAEhC;AACA,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC5D,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EAEjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvB,MAAMI,YAAY,GAAG,MAAMvB,MAAM,CAACmB,UAAU,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAAC,CAAC,CAAC;;EAElC;EACA;EACC,IAAG,CAACD,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;IACzB,MAAM;MAAEC,WAAW;MAAEC;IAAK,CAAC,GAAGR,QAAQ;IACtC,MAAMS,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAAC;IAE3B,IAAI;MACF,MAAM3B,MAAM,CAACkB,UAAU,EAAE;QACxBM,WAAW;QACXC,KAAK;QACLC;MACD,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACbR,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEO,KAAK,CAACC,OAAO,CAAC;IACxD;EACF;;EAED;EACA;EACC,OAAOX,UAAU;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}