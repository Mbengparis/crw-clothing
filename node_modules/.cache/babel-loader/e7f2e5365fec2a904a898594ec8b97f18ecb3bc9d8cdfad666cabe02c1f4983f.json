{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD4TkR1Mvt1J0GxTEBRFy3YYL2K_RPgeS8\",\n  authDomain: \"crwn-clothing-db-1481c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-1481c\",\n  storageBucket: \"crwn-clothing-db-1481c.firebasestorage.app\",\n  messagingSenderId: \"535960439826\",\n  appId: \"1:535960439826:web:6b4e0351808504a8fc1ccb\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n//google authrntication through firebase\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\n\n//craeting user in firesbase after google auth\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot.exists());\n\n  //if user data does not exist\n  //create / set the document with data from userAuth in my collection\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  //if user data exist, return userDocRef\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"sources":["/Users/mbeng/crw-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\n\nimport { \n    getAuth, \n    signInWithRedirect, \n    signInWithPopup, \n    GoogleAuthProvider,\n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    signOut,\n    onAuthStateChanged\n} from 'firebase/auth';\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc\n} from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD4TkR1Mvt1J0GxTEBRFy3YYL2K_RPgeS8\",\n  authDomain: \"crwn-clothing-db-1481c.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-1481c\",\n  storageBucket: \"crwn-clothing-db-1481c.firebasestorage.app\",\n  messagingSenderId: \"535960439826\",\n  appId: \"1:535960439826:web:6b4e0351808504a8fc1ccb\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n//google authrntication through firebase\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n   prompt: \"select_account\"\n});\n\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () =>\n   signInWithPopup (auth, googleProvider);\n\nexport const signInWithGoogleRedirect = () => \n  signInWithRedirect(auth, googleProvider)\n\nexport const db = getFirestore();\n\n//craeting user in firesbase after google auth\nexport const createUserDocumentFromAuth = async (\n  userAuth, \n  additionalInformation = {}) => {\n\n   if(!userAuth) return;\n\n  const userDocRef = doc(db, 'users', userAuth.uid);\n\n  console.log(userDocRef);\n\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot.exists());\n\n  //if user data does not exist\n  //create / set the document with data from userAuth in my collection\n   if(!userSnapshot.exists()) {\n     const { displayName, email} = userAuth;\n     const createAt = new Date();\n\n     try {\n       await setDoc(userDocRef, {\n        displayName,\n        email,\n        createAt,\n        ...additionalInformation\n       })\n     } catch (error) {\n        console.log('error creating the user', error.message);\n     }\n   }\n\n  //if user data exist, return userDocRef\n   return userDocRef;\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if(!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n}\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if(!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n}\n\nexport const signOutUser = async () => await signOut(auth); \n\nexport const onAuthStateChangedListener = (callback) => onAuthStateChanged(auth, callback);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}